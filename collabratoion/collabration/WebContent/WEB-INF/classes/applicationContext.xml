<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<context:component-scan base-package="com.mdnet.travel.core" />
	<!-- 配置数据库连接池（dbcp） -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:url="jdbc:mysql://115.28.86.18:3306/weixin"
		p:driverClassName="com.mysql.jdbc.Driver" p:username="lzj" p:password="GhostLiu"
		p:minEvictableIdleTimeMillis="1800000" p:numTestsPerEvictionRun="3"
		p:testOnBorrow="true" p:testOnReturn="true" p:testWhileIdle="true"
		p:validationQuery="SELECT 1" />


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource" p:mappingLocations="classpath:/mapping/*.hbm.xml">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		p:sessionFactory-ref="sessionFactory" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- quartz定时器定义 -->
	<!-- 每3秒查询一次数据库，将为发送的短信写入本地短信库 -->
	<!-- 要调用的工作类，即任务处理类 -->
	<bean id="orderQuery" class="com.mdnet.travel.core.model.OrderQueryJob">

	</bean>
	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="queryOrderTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="orderQuery" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>

	<!-- CronTigger类型 -->
	<bean id="doOrderQueryTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="queryOrderTask" />
		</property>
		<property name="cronExpression">
			<value>0 10 9,13,17,21 ? * *</value><!-- 每天9 13 17 21 时各执行一次 触发 0 * 9,13,17,21 
				? * * -->
		</property>
	</bean>
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序，随项目一起启动 -->
	<bean id="startOrderQuery" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doOrderQueryTime" />
			</list>
		</property>
	</bean>

	<!-- 每3秒查询一次数据库，将为发送的短信写入本地短信库 -->
	<!-- 要调用的工作类，即任务处理类 -->
	<bean id="quartzJob" class="com.mdnet.travel.core.model.QuartzJob">
		<property name="domain">
			<value>webrtc.vmeeting.cn</value>
		</property>
		<property name="websocket_proxy_url">
			<value>ws://webrtc.vmeeting.cn:10060</value>
		</property>
		<property name="outbound_proxy_url">
			<value>udp://webrtc.vmeeting.cn:5060</value>
		</property>
		<property name="ice_servers">
			<!-- [{ url: 'stun:stun.l.google.com:19302'}, { url:'turn:user@numb.viagenie.ca', 
				credential:'myPassword'}] -->
			<value>[{ url: 'stun:stun.l.google.com:19302'}, {
				url:'turn:user@numb.viagenie.ca', credential:'myPassword'}]</value>
		</property>
		<property name="realm">
			<value>webrtc.vmeeting.cn</value>
		</property>
	</bean>
	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="jobtask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="quartzJob" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>
	<!-- 定义触发时间 和下面的CronTrigger类型选其一 -->
	<bean id="doTime" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="startDelay">
			<value>1000</value>
		</property>
		<property name="repeatInterval">
			<value>20000</value>
		</property>
		<property name="jobDetail">
			<ref local="jobtask" />
		</property>
	</bean>
	<!-- CronTigger类型 -->
	<!-- <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail"> <ref bean="jobtask" /> </property> <property 
		name="cronExpression"> <value>2</value> </property> </bean> -->
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序，随项目一起启动 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTime" />
			</list>
		</property>
	</bean>
</beans>